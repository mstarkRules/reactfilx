[{"C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\index.js":"1","C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\App.js":"2","C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\Tmbd.js":"3","C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\components\\MovieRow\\index.js":"4","C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\components\\FeaturedMovie\\index.js":"5","C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\components\\Header\\index.js":"6"},{"size":211,"mtime":1611661754974,"results":"7","hashOfConfig":"8"},{"size":2618,"mtime":1611661754969,"results":"9","hashOfConfig":"8"},{"size":2579,"mtime":1611661754969,"results":"10","hashOfConfig":"8"},{"size":2325,"mtime":1611661754973,"results":"11","hashOfConfig":"8"},{"size":2098,"mtime":1611666334485,"results":"12","hashOfConfig":"8"},{"size":761,"mtime":1611661754972,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1wq26pg",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"16"},"C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\index.js",[],["31","32"],"C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\App.js",["33","34","35"],"import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\n\r\nimport MovieRow from './components/MovieRow/';\r\nimport FeaturedMovie from './components/FeaturedMovie/';\r\nimport Header from './components/Header/';\r\n\r\nimport Tmdb from './Tmbd';\r\n\r\nimport { Spinner } from 'react-activity';\r\nimport 'react-activity/lib/Spinner/Spinner.css';\r\n\r\nconst App =()=>{\r\n\r\n  const [movieList, setMovieList] = useState([]);\r\n  const [featuredData, setFeaturedData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [blackHeader, setBlackHeader] = useState(false);\r\n\r\n  const loadAll = async ()=>{\r\n    let list = await Tmdb.getHomeList();\r\n    setMovieList(list);\r\n\r\n    loadFeaturedData(list);\r\n  }\r\n\r\n  const loadFeaturedData = async(list)=>{\r\n    setLoading(true);\r\n\r\n    let originals = list.filter(i=>i.slug === 'originals');\r\n    let randomChosen = Math.floor(Math.random()* (originals[0].items.results.length - 1 ));\r\n    let chosen = originals[0].items.results[randomChosen];\r\n\r\n    let choseInfo = await Tmdb.getMovieInfo(chosen.id,'tv');\r\n\r\n    let choseMovieInfo = await Tmdb.getMovieInfo(chosen.id,'movie');\r\n\r\n    setFeaturedData(choseInfo);\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  useEffect(()=>{\r\n\r\n    loadAll();\r\n  },[]);\r\n\r\n  useEffect(()=>{\r\n    const scrollListener = ()=>{\r\n      if(window.scrollY > 10){\r\n        setBlackHeader(true);\r\n      } else{\r\n        setBlackHeader(false);\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', scrollListener);\r\n\r\n    return ()=>{\r\n      window.removeEventListener('scroll', scrollListener);\r\n\r\n    }\r\n  },[])\r\n    \r\n  return(\r\n    \r\n    <div className=\"page\">\r\n      \r\n      <Header black={blackHeader}/>\r\n      {loading &&\r\n        <div className=\"spinner\">\r\n          <Spinner\r\n          \r\n          />\r\n        </div>\r\n        \r\n      }\r\n      \r\n      {featuredData &&\r\n        <FeaturedMovie\r\n          item={featuredData}\r\n        />\r\n      }\r\n      {!loading &&\r\n        <section className=\"lists\">\r\n        {movieList.map((item, key)=>(\r\n          <MovieRow\r\n            key={key}\r\n            data={item}\r\n          />\r\n        ))}\r\n      </section>\r\n      }\r\n      \r\n      {!loading && \r\n        <footer>\r\n        Feito com <span role=\"img\" aria-label=\"coração\">❤️</span> por \r\n        \r\n        <a className=\"footer--link\" href=\"https://www.linkedin.com/in/marcos-paulo-amorim-b08228160/\"  target=\"_blank\"> MStark</a><br/>\r\n        Direitos de imagem pertencem a Netflix <br/>\r\n        Informações base da API do Themoviedb.org \r\n      </footer>\r\n      }\r\n      \r\n      \r\n    </div>\r\n  )\r\n}\r\nexport default App;","C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\Tmbd.js",["36"],"const API_KEY = '2d8d4346864e27373ba3783d11b4a8c8';\r\n\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\n\r\n\r\nconst basicFetch = async(endpoint)=>{\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\n\r\nexport default {\r\n    getHomeList: async()=>{\r\n        return[\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais da Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            }\r\n        ]\r\n    },\r\n\r\n    getMovieInfo: async(movieId, type)=>{\r\n        let info = {};\r\n\r\n        if(movieId){\r\n            switch(type){\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n                break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n                break;\r\n                default:\r\n                    info = null;\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n}","C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\components\\MovieRow\\index.js",["37"],"import React, {useState} from 'react';\r\nimport './MovieRow.css';\r\n\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\n\r\nexport default (props)=>{\r\n    const [scrollX, setScrollX] = useState(0);\r\n\r\n    const handleLeftArrow=()=>{\r\n        //pegar o valor pra se scrollar pra esquerda\r\n        //usar o tamanho da tela /2\r\n        let x = scrollX + Math.round(window.innerWidth /2);\r\n        if(x >0){\r\n            x = 0;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    const handleRightArrow=()=>{\r\n        //pega o valor que quer scrollar\r\n        let x = scrollX - Math.round(window.innerWidth /2);\r\n        // pega o tamanho da lista de itens\r\n        let listW = props.data.items.results.length * 150;\r\n        //agora verifico se a diferença do tamanho da tela\r\n        //menos o tamanho da lista é maior que o valor que\r\n        //se quer rolar. Se for maior, tem que voltar um pouco.\r\n        if((window.innerWidth - listW) > x){\r\n            // 60 é o valor dos paddings laterais de 30\r\n            x = (window.innerWidth - listW) - 60;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>{props.data.title}</h2>\r\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n                <NavigateBeforeIcon style={{fontSize: 50}}/>\r\n            </div>\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n                <NavigateNextIcon style={{fontSize: 50}} />\r\n            </div>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: props.data.items.results.length * 150\r\n                }}>\r\n                    {props.data.items.results.length > 0 && props.data.items.results.map((item, key)=>(\r\n                        <div key={key} className=\"movieRow--item\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} \r\n                                alt={item.original_title}\r\n                            />\r\n                        </div>\r\n                        \r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\components\\FeaturedMovie\\index.js",["38","39"],"C:\\Users\\USER\\Desktop\\appsmp\\reactfilx\\src\\components\\Header\\index.js",["40"],"import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default ({black})=>{\r\n\r\n\r\n\r\n    return(\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix\"/>\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://occ-0-2545-3852.1.nflxso.net/dnm/api/v6/0RO1pLmU93-gdXvuxd_iYjzPqkc/AAAABQazGc8OxX63e1mRo_dG4rnAjvy-KW57vP-CaAUavTsm33zC29Zx30V6AA0Ma8x_nqX7LNVfRMVbpvQzf3xT4C1muU9z.png\" alt=\"Usuário\"/>\r\n                </a>\r\n            </div>\r\n        </header>\r\n    );\r\n}",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":36,"column":9,"nodeType":"47","messageId":"48","endLine":36,"endColumn":23},{"ruleId":"49","severity":1,"message":"50","line":46,"column":5,"nodeType":"51","endLine":46,"endColumn":7,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":99,"column":9,"nodeType":"55","endLine":99,"endColumn":120},{"ruleId":"56","severity":1,"message":"57","line":14,"column":1,"nodeType":"58","endLine":78,"endColumn":2},{"ruleId":"56","severity":1,"message":"59","line":8,"column":1,"nodeType":"58","endLine":62,"endColumn":2},{"ruleId":"56","severity":1,"message":"59","line":4,"column":1,"nodeType":"58","endLine":59,"endColumn":2},{"ruleId":"49","severity":1,"message":"60","line":28,"column":7,"nodeType":"51","endLine":28,"endColumn":9,"suggestions":"61"},{"ruleId":"56","severity":1,"message":"59","line":4,"column":1,"nodeType":"58","endLine":22,"endColumn":2},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'choseMovieInfo' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadAll'. Either include it or remove the dependency array.","ArrayExpression",["64"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign arrow function to a variable before exporting as module default","React Hook useEffect has a missing dependency: 'loadGenres'. Either include it or remove the dependency array.",["65"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [loadAll]",{"range":"70","text":"71"},"Update the dependencies array to be: [loadGenres]",{"range":"72","text":"73"},[1255,1257],"[loadAll]",[631,633],"[loadGenres]"]